1. Veuillez indiquer où se trouve dans votre projet un exemple de chacun des concepts suivants (en indiquant le concept, le nom du fichier et le numéro de ligne) :
a. un exemple de masquage public;
Fichier : Transducer.h  Ligne : 32

virtual std::string transduce(symbol_t symbol) = 0;

Cette fonction va être hérité par les enfants de Transducer. Ceux-ci sont oubligé d'implémenter leur version de cette fonction.

b. un exemple de masquage protégé;
Fichier : Reader.h Ligne : 47

virtual symbol_t readOneFromSource() = 0;

Les enfants de Reader sont d'oubligé d'implémenter leur version de cette fonction qu'ils héritent de leur parent.

c. un exemple de masquage privé;
Fichier  : FTS.h ligne : 43-44

virtual void initialize() {}
virtual void writeOptionInfo(Writer & writer) {}

Ces deux fonction vont être héritée par les enfants de et ceux-ci vont devoir les implémenter eux-mêmes.

d. un exemple de surcharge de fonction;
Fichier : TransducerCounter.h ligne : 35
std::string transduce(symbol_t symbol) override;

Fichier : TransducerRepeater.h ligne : 27
std::string transduce(symbol_t symbol) override;

Fichier : TransducerReporter.h ligne : 40
std::string transduce(symbol_t symbol) override;

Fuchier : TransducerStaticWriter.h ligne : 28
std::string transduce(symbol_t symbol);

Toutes les enfant de la classe Transducer on leur propre version de la fonction transduce, ce qui permet de toujours appeler cette fonction, mais différentes actions sont exécuté selon le type d'objet dont elle est appelée.

e. un exemple de constructeur;
Fichier : TransducerCounter.cpp Ligne : 7-10
TransducerCounter::TransducerCounter()
	: Transducer(), mCount{ 0 }
{
}
On initialise mCount à 0 et on créer la classe parent (Tranducer)

f. un exemple de destructeur;
Fichier : Transition.cpp Ligne : 16-24
Transition::~Transition()
{
	delete mSymbolComparator;

	for (auto const & t : mTransducers)
	{
		delete t;
	}
}
Le destructeur va effacer la mémoire de la liste mTransducers.

g. un exemple de constructeur de copie;
Fichier : Transducer.h ligne : 26
Transducer(const Transducer & transducer) = default;

h. un exemple d’opérateur d’assignation de copie;
Fichier : Transducer.h ligne : 28
Transducer& operator=(const Transducer & transducer) = default;

i. un exemple d’héritage;
Fichier : TransducerCounter.h ligne : 15
class TransducerCounter : public Transducer

Dans la déclaration de la classe TransducerCounter, celle-ci hérite du contenue de la classe parent Transducer dans sa section publique.

j. un exemple de redéfinition de fonction de classe;
Fichier : TransduceCounter.h Ligne : 35
std::string transduce(symbol_t symbol) override;

La fonction Transduce de la classe TransducerCounter redéfinit la fonction Transducer de classe parent Tranducer.

k. un exemple où la redéfinition d’une fonction de classe enfant appelle la fonction équivalente du parent.
Fichier : SymbolDistinctOne.cpp Ligne : 10-13
bool SymbolDistinctOne::compare(symbol_t symbol) const
{
	return !SymbolMatchOne::compare(symbol);
}

La fonction compare de la classe SymbolDistinctOne retourne l'inverse de la fonction compare de la classe parent (SymbolMatchOne).



2. De façon concise et précise, veuillez expliquer dans vos mots les concepts suivants :
a. Pourquoi et comment vous faites la libération de la mémoire des objets alloués dynamiquement. Prenez le cas précis de la classe State qui libère les objets Transition.

Pour libérer la mémoire d'un objet on doit utiliser le mot clé "delete". Dans le cas des objets Transition, ils étaient contenu dans une liste, on a donc parcouru la liste au complet et on a utiliser delete à chaque objet.

b. Dans la section Fonctions obligatoires, il est stipulé que certaines fonctions requièrent des considérations supplémentaires. Expliquez pourquoi c’est le cas pour les classes identifiées. Aussi, expliquer la logique d’une solution pouvant résoudre ce problème et comment il serait possible de l’implémenter.




3. Optionnellement, une section Recommandations pour indiquer toutes les coquilles que vous avez pu trouver dans cet énoncé et le code source ainsi que des suggestions (merci pour votre participation).
Exécuter le code avant de le donner aux élèves.
